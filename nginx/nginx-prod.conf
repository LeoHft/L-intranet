#Configuration pour le développement
user nginx; # Utilisateur
worker_processes auto;# Nombre de processus de travail
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events { 
    worker_connections 1024; # Nombre maximum de connexions par processus de travail
}

http {
    include /etc/nginx/mime.types; 
    default_type application/octet-stream; 

    # Configuration de logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Optimisations
    # https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#:~:text=%3B%0A%20%20%20%20%23...%0A%7D-,Enable%20tcp_nopush,-Use%20the%20tcp_nopush
    sendfile on; 
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;


    # ============ UPSTREAMS ============
    upstream intranet_backend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server intranet-backend:9000;
        keepalive 8;
    }

    # ============ REDIRECTION HTTP → HTTPS ============
    server {
        listen 80;
        server_name localhost;
        
        # Redirection forcée vers HTTPS quand on accède via HTTP
        return 301 https://$server_name:8443$request_uri;
    }

    # ============ SERVEUR PRINCIPAL HTTPS ============
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;

        # Configuration SSL
        ssl_certificate /etc/nginx/ssl/certificate.crt;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Headers de sécurité
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000" always;


        # ============ API ROUTES ============
        # 1 service par location
        location /api/ {
            # Utilisation de FastCGI pour PHP-FPM
            fastcgi_pass intranet_backend_service;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /var/www/intranet-backend/public/index.php;
            include fastcgi_params;
            
            # Variables FastCGI spécifiques
            fastcgi_param REQUEST_URI $request_uri;
            fastcgi_param QUERY_STRING $query_string;
            fastcgi_param REQUEST_METHOD $request_method;
            fastcgi_param CONTENT_TYPE $content_type;
            fastcgi_param CONTENT_LENGTH $content_length;
            
            # Headers personnalisés
            fastcgi_param HTTP_HOST $host;
            fastcgi_param HTTP_X_REAL_IP $remote_addr;
            fastcgi_param HTTP_X_FORWARDED_FOR $proxy_add_x_forwarded_for;
            fastcgi_param HTTP_X_FORWARDED_PROTO $scheme;
            fastcgi_param HTTP_X_SERVICE_NAME "intranet-backend";
        }

        # ============ STORAGE FILES (Laravel) ============
        # Servir les fichiers statiques uploadés via Laravel
        location /storage/ {
            alias /var/www/intranet-backend/storage/app/public/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Essayer de servir le fichier, sinon 404
            try_files $uri =404;
            
            # Headers de sécurité
            add_header X-Frame-Options SAMEORIGIN;
        }


        # ============ FRONTEND (Fichiers statiques buildés) ============
        
        # Servir les assets statiques (JS, CSS, images, etc.)
        location /assets/ {
            alias /var/www/html/assets/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Gestion des fichiers compressés
            gzip_static on;
            try_files $uri $uri/ =404;
        }

        # Route principale pour servir l'application React (SPA)
        location / {
            root /var/www/html;
            index index.html;
            
            # Essayer de servir le fichier demandé, sinon rediriger vers index.html (pour le routing côté client)
            try_files $uri $uri/ /index.html;
            
            # Headers de cache pour l'index.html (pas de cache pour forcer la mise à jour)
            location = /index.html {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
            
            # Headers de sécurité pour les fichiers statiques
            add_header X-Content-Type-Options nosniff;
            add_header X-Frame-Options DENY;
            add_header X-XSS-Protection "1; mode=block";
        }

        # ============ HEALTH CHECK ============
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}