#Configuration pour le développement
user nginx; # Utilisateur
worker_processes auto;# Nombre de processus de travail
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events { 
    worker_connections 1024; # Nombre maximum de connexions par processus de travail
}

http {
    include /etc/nginx/mime.types; 
    default_type application/octet-stream; 

    # Configuration de logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Optimisations
    # https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#:~:text=%3B%0A%20%20%20%20%23...%0A%7D-,Enable%20tcp_nopush,-Use%20the%20tcp_nopush
    sendfile on; 
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;


    # ============ UPSTREAMS ============
    upstream intranet_backend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server intranet-backend-dev:8000;
        keepalive 8;
    }

    upstream frontend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server intranet-frontend-dev:5173;
        keepalive 8;
    }

    # ============ REDIRECTION HTTP → HTTPS ============
    server {
        listen 80;
        server_name localhost;
        
        # Redirection forcée vers HTTPS quand on accède via HTTP
        return 301 https://$server_name:8443$request_uri;
    }

    # ============ SERVEUR PRINCIPAL HTTPS ============
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;

        # Configuration SSL
        ssl_certificate /etc/nginx/ssl/certificate.crt;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Headers de sécurité
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000" always;


        # ============ API ROUTES ============
        # 1 service par location
        location /api/ {
            proxy_pass http://intranet_backend_service/api/; # Redirection vers le service backend
            include /etc/nginx/proxy_params.conf; # Utiliser les paramètres de proxy définis dans un fichier séparé
            

            proxy_set_header X-Service-Name "intranet-backend"; # Indiquer le nom du service pour le logging
            
        }

        # ============ STORAGE FILES (Laravel) ============
        # Servir les fichiers statiques uploadés via Laravel
        location /storage/ {
            proxy_pass http://intranet_backend_service/storage/; # Redirection vers le service backend
            include /etc/nginx/proxy_params.conf;
            proxy_set_header X-Service-Name "intranet-backend-storage";
            
            # Headers pour les fichiers statiques
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }


        # ============ FRONTEND (Vite Dev Server avec Hot Reload) ============
        
        # WebSocket pour Vite HMR - Route principale pour le Hot Module Replacement
        location /@vite/client {
            proxy_pass http://frontend_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Route principale pour servir l'application React
        location / {
            proxy_pass http://frontend_service/;
            include /etc/nginx/proxy_params.conf;

            # Support pour le Hot Module Replacement (HMR)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # Headers spécifiques pour Vite Dev Server
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ============ HEALTH CHECK ============
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}